#!/usr/bin/env python3

import argparse
import glob
import json
import os
import re
import subprocess
import sys

from grimoire.genome import Reader

#######
# CLI #
#######

parser = argparse.ArgumentParser(
	description='dataset builder for apc algorithm')
parser.add_argument('genes', type=str, metavar='<genes dir>',
	help='path to gene build directory')
parser.add_argument('--seqlen', type=int, metavar='<int>', default=1200,
	required=False, help='maximum sequence length [%(default)i]')
parser.add_argument('--rnaseq', type=int, metavar='<int>', default=100000,
	required=False, help='minimum RNAseq value [%(default)i]')
parser.add_argument('--splices', type=int, metavar='<int>', default=3,
	required=False, help='maximum number of splices per tx [%(default)i]')
parser.add_argument('--ilen', type=int, metavar='<int>', default=35,
	required=False, help='minimum intron length [%(default)i]')
parser.add_argument('--elen', type=int, metavar='<int>', default=25,
	required=False, help='minimum exon length [%(default)i]')
parser.add_argument('--imax', type=int, metavar='<int>', default=3,
	required=False, help='maximum number of introns [%(default)i]')
parser.add_argument('--flank', type=int, metavar='<int>', default=99,
	required=False, help='genomic flank length [%(default)i]')
parser.add_argument('--isoforms', type=int, metavar='<int>', default=1000000,
	required=False, help='maximum number of isoforms [%(default)i]')
parser.add_argument('--program', type=str, metavar='<str>',
	default='isocounter', required=False,
	help='isoform counting program [%(default)s]')
arg = parser.parse_args()

#############
# Functions #
#############

def isoforms(seq, maxs, minin, minex, flank):
	stuff = subprocess.run([arg.program, seq, '--max_splice', str(maxs),
		'--min_intron', str(minin), '--min_exon', str(minex),
		'--flank', str(flank)], capture_output=True, text=True).stdout
	f = stuff.split()
	return int(f[5])

subprocess.run(['ls', '-l'], capture_output=True, text=True).stdout

################
# Output Files # they are named :(
################

gfh = open("apc.genes.txt", "w")
lfh = open("apc.log.json", "w")

########
# Main #
########

gfh.write('# id\tlength\tintrons\tRNAseq\tisoforms\tstrand\n')

log = {
	'total_gene_regions': 0,
	'multiple_genes': 0,
	'no_introns': 0,
	'poorly_expressed': 0,
	'non_canonical': 0,
	'gene_too_long': 0,
	'too_many_introns': 0,
	'too_many_isoforms': 0,
	'kept_genes': 0,
}

for ff in glob.glob(f'{arg.genes}/*.fa'):
	gf = ff[:-2] + 'gff3'

	genome = Reader(gff=gf, fasta=ff)
	chrom = next(genome) # there is only one in a pcg build
	log['total_gene_regions'] += 1
	
	##########
	# filter 1: isolated genes
	##########
	genes = len([None for f in chrom.ftable.features if f.type == 'gene'])
	if genes > 1:
		log['multiple_genes'] += 1
		print('M', end='', file=sys.stderr)
		sys.stderr.flush()
		continue
	
	gene = chrom.ftable.build_genes()[0] # the one true gene
	
	##########
	# filter 2: has intron
	##########
	max_introns = 0
	for tx in gene.transcripts():
		if len(tx.introns) > max_introns: max_introns = len(tx.introns)
	if max_introns == 0:
		log['no_introns'] += 1
		print('0', end='', file=sys.stderr)
		sys.stderr.flush()
		continue
	
	##########
	# filter 3: plentiful splicing data matching the introns
	##########
	introns = {}
	for tx in gene.transcripts():
		for intron in tx.introns:
			sig = (intron.beg, intron.end)
			if sig not in introns: introns[sig] = True
	
	maxexp = 0
	for f in chrom.ftable.features:
		sig = (f.beg, f.end)
		if f.source == 'RNASeq_splice' and sig in introns and f.score > maxexp:
			maxexp = int(f.score)
	if maxexp < arg.rnaseq:
		log['poorly_expressed'] += 1
		print('P', end='', file=sys.stderr)
		sys.stderr.flush()
		continue
	
	##########
	# filter 4: not weird (see grimoire defaults for gene build)
	##########
	weird = False
	for tx in gene.transcripts():
		if tx.issues:
			weird = True
			break
	if weird:
		log['non_canonical'] += 1
		print('W', end='', file=sys.stderr)
		sys.stderr.flush()
		continue
	
	##########
	# filter 5: too long
	##########
	if len(chrom.seq) > arg.seqlen:
		log['gene_too_long'] += 1
		print('L', end='', file=sys.stderr)
		sys.stderr.flush()
		continue
	
	##########
	# filter 6: too many introns
	##########
	many_introns = False
	for tx in gene.transcripts():
		if len(tx.introns) > arg.imax:
			many_introns = True
			break
	if many_introns:
		log['too_many_introns'] += 1
		print('I', end='', file=sys.stderr)
		sys.stderr.flush()
		continue
	
	##########
	# filter 7: too many isoforms
	##########
	isos = isoforms(ff, arg.splices, arg.ilen, arg.elen, arg.flank)
	if isos > arg.isoforms:
		log['too_many_isoforms'] += 1
		print('N', end='', file=sys.stderr)
		sys.stderr.flush()
		continue
	
	##########
	# made it!
	##########
	log['kept_genes'] += 1
	gfh.write(f'{chrom.name}\t{len(chrom.seq)}\t{len(tx.introns)}\t{maxexp}\t{isos}\t{gene.strand}\n')
	
	# debug
	#if debug > 999: break

lfh.write(json.dumps(log, indent=4))


